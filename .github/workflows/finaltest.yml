name: Node.js CI/CD Pipeline

on:
  push:
    branches: 
      - main  # Trigger when code is pushed to the `main` branch
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the `main` branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]  # You can update this to match your project's Node.js version

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run Jest tests
      - name: Run tests
        run: npm test  # Ensure your tests are set up with Jest

  deploy:
    needs: build-and-test  # This ensures the deploy job runs only if the build-and-test job succeeds
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy if on the `main` branch

    steps:
      # Step 1: Checkout the repository again (necessary in the deploy job)
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up SSH key for deployment
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa  # The SSH private key is stored as a secret
          chmod 600 ~/.ssh/id_rsa  # Set proper permissions for the private key
          ssh-keyscan github.com >> ~/.ssh/known_hosts  # Add GitHub's SSH key to known_hosts for SSH authenticity check

      # Step 3: Deploy to the remote server using SCP (secure copy)
      - name: Deploy to Remote Server via SSH
        run: |
          scp -r ./dist/* username@${{ secrets.REMOTE_HOST }}:/path/to/deploy  # Customize this to fit your server's deploy path
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}  # Remote server hostname/IP (e.g., 192.168.1.1)
          REMOTE_USER: ${{ secrets.REMOTE_USER }}  # Remote server SSH user (e.g., ubuntu, root, etc.)
